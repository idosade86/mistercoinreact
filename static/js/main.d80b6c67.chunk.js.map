{"version":3,"sources":["services/BitcoinService.js","pages/HomePage/HomePage.js","pages/ContactPage/ContactPage.js","pages/StatisticPage/StatisticPage.js","pages/ContactDetails/ContactDetails.js","services/ContactService.js","pages/ContactEdit/ContactEdit.js","services/UserService.js","pages/LoginPage/LoginPage.js","App.js","serviceWorker.js","store/ContactStore.js","store/UserStore.js","index.js","store/RootStore.js"],"names":["BitcoinService","getRate","getMarketPrice","value","arguments","length","undefined","axios","get","concat","HomePage","inject","observer","state","BTC","rate","this","setState","logedUser","props","store","UserStore","react_default","a","createElement","className","name","coins","Link","to","Component","ContactPage","_this","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","filterByName","handleFilter","bind","assertThisInitialized","contactStore","fetchContacts","input","_this2","contacts","type","placeholder","ref","onChange","map","user","key","_id","src","StatisticPage","chart","slotsToChart","fetchData","numberInput","spanInput","getSpan","data","values","forEach","slot","push","y","ev","componentDidMount","preventDefault","action","onSubmit","build","style","fill","ContactDetails","selectedContact","getContactById","match","params","phone","email","_addContact","contact","Promise","resolve","reject","txt","possible","i","charAt","Math","floor","random","_makeId","ContactService","getContacts","filterBy","contactsToReturn","filter","toLocaleLowerCase","includes","sort","b","_ref","contactId","find","deleteContact","id","index","findIndex","splice","term","saveContact","c","_updateContact","getEmptyContact","ContactEdit","handleChange","userPref","target","handleSubmit","_callee","updateUser","regenerator_default","wrap","_context","prev","next","sent","history","stop","handleDelete","contactToEdit","class","onClick","observable","UserService","loadeUser","typedDetails","moves","LoginPage","handleDetails","typedUsername","handleLogin","signup","PrivateRoute","Route","Redirect","App","console","log","HashRouter","NavLink","exact","Switch","path","component","SignupPage","App_PrivateRoute","Boolean","window","location","hostname","ContactStore","rootStore","initializerDefineProperty","ContactStore_descriptor","_descriptor2","JSON","parse","localStorage","getItem","setItem","stringify","RootStore","showNavBar","setUser","ReactDOM","render","index_module","Fragment","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d80b6c67.chunk.js","sourcesContent":["import axios from 'axios'\r\n\r\nfunction getRate() {\r\n    // return axios.get('https://blockchain.info/tobtc?currency=USD&value=1').then(res=>console.log(res))\r\n    return 0.00028904\r\n}\r\n\r\nfunction getMarketPrice(value = 5) {\r\n    return axios.get(`https://api.blockchain.info/charts/market-price?timespan=${value}months&format=json&cors=true`)\r\n}\r\n\r\nexport default {\r\n    getRate,\r\n    getMarketPrice\r\n}","import React, { Component } from 'react';\r\nimport BitcoinService from '../../services/BitcoinService.js'\r\nimport { Link } from 'react-router-dom'\r\nimport '../HomePage/HomePage.scss'\r\nimport { inject, observer } from 'mobx-react';\r\n\r\n\r\n\r\n@inject('store')\r\n@observer\r\nclass HomePage extends Component {\r\n    state = {\r\n        BTC: null,\r\n        rate: null,\r\n    }\r\n\r\n    componentDidMount() {\r\n        const rate = BitcoinService.getRate();\r\n        this.setState({ rate })\r\n    }\r\n\r\n    render() {\r\n        const rate = this.state.rate\r\n        const logedUser = this.props.store.UserStore.logedUser\r\n        \r\n        return (\r\n            <div>\r\n                {\r\n                    logedUser && <header className=\"home-header\">\r\n                        <ul>\r\n                            <h1>Hello: {logedUser.name}</h1>\r\n                            <li>Coins:{logedUser.coins}</li>\r\n                            <li>BTC: {rate}</li>\r\n                        </ul>\r\n                        <div className=\"btns-container\">\r\n                            <Link to=\"/contact\">\r\n                                <button>Money transfer</button>\r\n                            </Link>\r\n                            <Link to=\"/Statistics\">\r\n                                <button>Statistics</button>\r\n                            </Link>\r\n                        </div>\r\n                    </header>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}\r\nexport default HomePage","\r\nimport React, { Component } from 'react';\r\nimport '../ContactPage/ContactPage.scss'\r\nimport { Link } from 'react-router-dom'\r\nimport { inject,observer} from 'mobx-react';\r\n\r\n@inject('store')\r\n@observer\r\nclass ContactPage extends Component {\r\n\r\n    state = {\r\n        filterByName: ''\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.props.store.contactStore.fetchContacts();\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.handleFilter = this.handleFilter.bind(this);\r\n    }\r\n\r\n    async handleFilter() {     \r\n        this.props.store.contactStore.fetchContacts(this.input.value);\r\n    }\r\n\r\n    onClose(filterByName) {\r\n        this.setState({ filterByName })\r\n    }\r\n\r\n    render() {\r\n        const { contacts } = this.props.store.contactStore\r\n\r\n        return (\r\n            <div className=\"contact-header\">\r\n                {\r\n                    < section className=\"contact-container\">\r\n                        <input className=\"search-input\" type=\"text\" placeholder=\"Search\" ref={(input) => this.input = input} onChange={this.handleFilter} />\r\n                        {\r\n                            contacts.map(user => (\r\n                                <Link className=\"user-link\" key={user._id} to={`/Contact/${user._id}`}>\r\n                                    <div className=\"user-item\">\r\n                                        <img src={`https://robohash.org/${user.name}.png`}></img>\r\n                                        <p>{user.name}</p>\r\n                                    </div>\r\n                                </Link>\r\n                            ))\r\n                        }\r\n                        <Link to='Contact/Edit'>\r\n                            <button>Add New User</button>\r\n                        </Link>\r\n                    </section>\r\n                }\r\n            </div >\r\n        );\r\n    }\r\n}\r\nexport default ContactPage","\r\nimport React, { Component } from 'react';\r\nimport { Sparklines, SparklinesLine, SparklinesSpots } from 'react-sparklines';\r\nimport {Link} from 'react-router-dom'\r\nimport BitcoinService from '../../services/BitcoinService';\r\nimport './StatisticPage.scss'\r\n\r\nexport default class StatisticPage extends Component {\r\n\r\n    state = {\r\n        chart: true,\r\n        slotsToChart: null,\r\n        fetchData: null,\r\n        numberInput: '',\r\n        spanInput: ''\r\n\r\n    }\r\n\r\n    async  componentDidMount(value) {\r\n        var slotsToChart = []\r\n        var fetchData = await BitcoinService.getMarketPrice(value)\r\n        this.setState({ fetchData })\r\n        fetchData.data.values.forEach(slot => {\r\n            slotsToChart.push(slot.y)\r\n        })\r\n        this.setState({ slotsToChart })\r\n    }\r\n\r\n    constructor(props) {\r\n        super(props);\r\n        this.getSpan = this.getSpan.bind(this);\r\n    }\r\n\r\n    getSpan(ev) {\r\n        this.componentDidMount(this.input.value)\r\n        ev.preventDefault()\r\n    }\r\n\r\n    render() {\r\n        const { chart } = this.state\r\n        const { fetchData } = this.state\r\n        const { slotsToChart } = this.state\r\n        return slotsToChart && (\r\n            <div>\r\n                <form action=\"submit.prevent\" onSubmit={this.getSpan}>\r\n                    <input type=\"number\" ref={(input) => this.input = input} />\r\n                    {/* <input list=\"timespan\" ref={(input) => this.input= input}/>\r\n                    <datalist id=\"timespan\">\r\n                        <option value=\"Days\" />\r\n                        <option value=\"Months\" />\r\n                        <option value=\"Years\" />\r\n                    </datalist> */}\r\n                    <button>Get rates</button>\r\n                </form>\r\n                {/* todo change chart by click months */}\r\n                <ul className=\"months-container\">\r\n                    <li>1M</li> |\r\n                    <li>2M</li> |\r\n                    <li>6M</li> |\r\n                    <li>12M</li> |\r\n                    <li>24M</li>\r\n                </ul>\r\n\r\n                <h1>Statistcs</h1>\r\n                <h2>{fetchData.data.name}</h2>\r\n                <Sparklines data={slotsToChart}>\r\n                    <SparklinesLine style={{ fill: \"none\" }} />\r\n                    <SparklinesSpots />\r\n                </Sparklines>\r\n                <Link to=\"/Contact\">\r\n                <button>Bit a friend</button>\r\n                </Link>\r\n            </div>\r\n\r\n\r\n        )\r\n    }\r\n\r\n}","\r\nimport React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom'\r\nimport { inject, observer } from 'mobx-react';\r\nimport './ContactDetails.scss'\r\n\r\n\r\n@inject('store')\r\n@observer\r\nclass ContactDetails extends Component {\r\n    state = {\r\n        selectedContact: null\r\n    }\r\n\r\n    async componentDidMount() {\r\n        this.props.store.contactStore.getContactById(this.props.match.params)\r\n    }\r\n\r\n    backToList() {\r\n        this.state.selectedContact = null\r\n    }\r\n\r\n    @observer\r\n    render() {\r\n        const selectedContact = this.props.store.contactStore.selectedContact\r\n        return (\r\n            selectedContact && <section className=\"details-container\">\r\n                <h1 className=\"details-title\">User Details</h1>\r\n                <img className=\"details-img\" src={`https://robohash.org/${selectedContact.name}.png`}></img>\r\n                <p>Name: {selectedContact.name}</p>\r\n                <p>Phone number: {selectedContact.phone}</p>\r\n                <p>Email: {selectedContact.email}</p>\r\n                <Link to={`/contact/Edit/${selectedContact._id}`} props={selectedContact}>\r\n                    <button>Edit</button>\r\n                </Link>\r\n                <Link to=\"/Contact\">\r\n                    <button>Back</button>\r\n                </Link>\r\n            </section>\r\n        )\r\n    }\r\n}\r\nexport default ContactDetails","\nconst contacts = [\n  {\n    \"_id\": \"5a56640269f443a5d64b32ca\",\n    \"name\": \"Ochoa Hyde\",\n    \"email\": \"ochoahyde@renovize.com\",\n    \"phone\": \"+1 (968) 593-3824\"\n  },\n  {\n    \"_id\": \"5a5664025f6ae9aa24a99fde\",\n\n    \"name\": \"Hallie Mclean\",\n    \"email\": \"halliemclean@renovize.com\",\n    \"phone\": \"+1 (948) 464-2888\"\n  },\n  {\n    \"_id\": \"5a56640252d6acddd183d319\",\n\n    \"name\": \"Parsons Norris\",\n    \"email\": \"parsonsnorris@renovize.com\",\n    \"phone\": \"+1 (958) 502-3495\"\n  },\n  {\n    \"_id\": \"5a566402ed1cf349f0b47b4d\",\n\n    \"name\": \"Rachel Lowe\",\n    \"email\": \"rachellowe@renovize.com\",\n    \"phone\": \"+1 (911) 475-2312\"\n  },\n  {\n    \"_id\": \"5a566402abce24c6bfe4699d\",\n\n    \"name\": \"Dominique Soto\",\n    \"email\": \"dominiquesoto@renovize.com\",\n    \"phone\": \"+1 (807) 551-3258\"\n  },\n  {\n    \"_id\": \"5a566402a6499c1d4da9220a\",\n\n    \"name\": \"Shana Pope\",\n    \"email\": \"shanapope@renovize.com\",\n    \"phone\": \"+1 (970) 527-3082\"\n  },\n  {\n    \"_id\": \"5a566402f90ae30e97f990db\",\n\n    \"name\": \"Faulkner Flores\",\n    \"email\": \"faulknerflores@renovize.com\",\n    \"phone\": \"+1 (952) 501-2678\"\n  },\n  {\n    \"_id\": \"5a5664027bae84ef280ffbdf\",\n\n    \"name\": \"Holder Bean\",\n    \"email\": \"holderbean@renovize.com\",\n    \"phone\": \"+1 (989) 503-2663\"\n  },\n  {\n    \"_id\": \"5a566402e3b846c5f6aec652\",\n\n    \"name\": \"Rosanne Shelton\",\n    \"email\": \"rosanneshelton@renovize.com\",\n    \"phone\": \"+1 (968) 454-3851\"\n  },\n  {\n    \"_id\": \"5a56640272c7dcdf59c3d411\",\n\n    \"name\": \"Pamela Nolan\",\n    \"email\": \"pamelanolan@renovize.com\",\n    \"phone\": \"+1 (986) 545-2166\"\n  },\n  {\n    \"_id\": \"5a5664029a8dd82a6178b15f\",\n\n    \"name\": \"Roy Cantu\",\n    \"email\": \"roycantu@renovize.com\",\n    \"phone\": \"+1 (929) 571-2295\"\n  },\n  {\n    \"_id\": \"5a5664028c096d08eeb13a8a\",\n\n    \"name\": \"Ollie Christian\",\n    \"email\": \"olliechristian@renovize.com\",\n    \"phone\": \"+1 (977) 419-3550\"\n  },\n  {\n    \"_id\": \"5a5664026c53582bb9ebe9d1\",\n\n    \"name\": \"Nguyen Walls\",\n    \"email\": \"nguyenwalls@renovize.com\",\n    \"phone\": \"+1 (963) 471-3181\"\n  },\n  {\n    \"_id\": \"5a56640298ab77236845b82b\",\n\n    \"name\": \"Glenna Santana\",\n    \"email\": \"glennasantana@renovize.com\",\n    \"phone\": \"+1 (860) 467-2376\"\n  },\n  {\n    \"_id\": \"5a56640208fba3e8ecb97305\",\n\n    \"name\": \"Malone Clark\",\n    \"email\": \"maloneclark@renovize.com\",\n    \"phone\": \"+1 (818) 565-2557\"\n  },\n  {\n    \"_id\": \"5a566402abb3146207bc4ec5\",\n\n    \"name\": \"Floyd Rutledge\",\n    \"email\": \"floydrutledge@renovize.com\",\n    \"phone\": \"+1 (807) 597-3629\"\n  },\n  {\n    \"_id\": \"5a56640298500fead8cb1ee5\",\n\n    \"name\": \"Grace James\",\n    \"email\": \"gracejames@renovize.com\",\n    \"phone\": \"+1 (959) 525-2529\"\n  },\n  {\n    \"_id\": \"5a56640243427b8f8445231e\",\n\n    \"name\": \"Tanner Gates\",\n    \"email\": \"tannergates@renovize.com\",\n    \"phone\": \"+1 (978) 591-2291\"\n  },\n  {\n    \"_id\": \"5a5664025c3abdad6f5e098c\",\n\n    \"name\": \"Lilly Conner\",\n    \"email\": \"lillyconner@renovize.com\",\n    \"phone\": \"+1 (842) 587-3812\"\n  }\n];\n\nfunction sort(arr) {\n  return arr.sort((a, b) => {\n    if (a.name.toLocaleLowerCase() < b.name.toLocaleLowerCase()) {\n      return -1;\n    }\n    if (a.name.toLocaleLowerCase() > b.name.toLocaleLowerCase()) {\n      return 1;\n    }\n\n    return 0;\n  })\n}\n\nfunction getContacts(filterBy = null) {\n  return new Promise((resolve, reject) => {\n    var contactsToReturn = contacts;\n    if (filterBy) {\n      // const {term} = filterBy;\n      // console.log('filterBy',term);\n      contactsToReturn = contacts.filter(contact => {\n        return contact.name.toLocaleLowerCase().includes(filterBy) ||\n          contact.phone.toLocaleLowerCase().includes(filterBy) ||\n          contact.email.toLocaleLowerCase().includes(filterBy)\n      })\n    }\n    resolve(sort(contactsToReturn))\n  })\n}\n\nfunction getContactById({contactId}) {\n  return new Promise((resolve, reject) => {\n    const contact = contacts.find(contact => contact._id === contactId)\n    contact ? resolve(contact) : reject(`Contact id ${contactId} not found!`)\n  })\n}\n\nfunction deleteContact(id) {  \n  return new Promise((resolve, reject) => {\n    const index = contacts.findIndex(contact => contact._id === id)\n    if (index !== -1) {\n      contacts.splice(index, 1)\n    }\n\n    resolve(contacts)\n  })\n}\n\nfunction _updateContact(contact) {\n  return new Promise((resolve, reject) => {\n    const index = contacts.findIndex(c => contact._id === c._id)\n    if (index !== -1) {\n      contacts[index] = contact\n    }\n    resolve(contact)\n  })\n}\n\nfunction _addContact(contact) {\n  return new Promise((resolve, reject) => {\n    contact._id = _makeId()\n    contacts.push(contact)\n    resolve(contact)\n  })\n}\n\nfunction saveContact(contact) {\n  return contact._id ? _updateContact(contact) : _addContact(contact)\n}\n\nfunction getEmptyContact() {\n  return {\n    name: '',\n    email: '',\n    phone: ''\n  }\n}\n\nfunction filter(term) {\n  term = term.toLocaleLowerCase()\n  return new Promise((resolve, reject) => {\n    const c = contacts.filter(contact => {\n      return contact.name.toLocaleLowerCase().includes(term) ||\n        contact.phone.toLocaleLowerCase().includes(term) ||\n        contact.email.toLocaleLowerCase().includes(term)\n    })\n\n    resolve(c)\n  })\n}\n\nexport default {\n  getContacts,\n  getContactById,\n  deleteContact,\n  filter,\n  saveContact,\n  getEmptyContact\n}\n\nfunction _makeId(length = 10) {\n  var txt = ''\n  var possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'\n  for (var i = 0; i < length; i++) {\n    txt += possible.charAt(Math.floor(Math.random() * possible.length))\n  }\n  return txt\n}","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport ContactService from '../../services/ContactService';\r\nimport './ContactEdit.scss'\r\nimport { inject, observer } from 'mobx-react';\r\nimport { observable } from 'mobx';\r\n\r\n@inject('store')\r\n@observer\r\nclass ContactEdit extends Component {\r\n\r\n    @observable\r\n    selectedContact;\r\n\r\n    async componentDidMount() {\r\n        this.selectedContact = this.props.store.contactStore.selectedContact\r\n        if (!this.props.match.params.contactId) this.selectedContact = ContactService.getEmptyContact()\r\n        if (!this.selectedContact) {\r\n            this.selectedContact = ContactService.getEmptyContact()\r\n        }\r\n    }\r\n\r\n    handleChange = ev => {\r\n        let userPref = ev.target.name\r\n        this.selectedContact[userPref] = ev.target.value\r\n        // this.contactToEdit = { cntactToEdit: { ...this.cntactToEdit, [userPref]: ev.target.value } }\r\n        // this.ContactEdit[userPref] = ev.target.value\r\n    }\r\n\r\n    handleSubmit = async ev => {\r\n        ev.preventDefault();\r\n        var updateUser = await this.props.store.contactStore.saveContact(this.selectedContact);\r\n        this.props.history.push(`/contact/${updateUser._id}`)\r\n    }\r\n\r\n    // todo\r\n    handleDelete = ev => {\r\n        this.props.store.contactStore.deleteContact(this.selectedContact._id)\r\n        this.props.history.push('/contact')\r\n    }\r\n\r\n    render() {\r\n        const contactToEdit = this.selectedContact\r\n        return (\r\n            <section>\r\n                {contactToEdit && <div class=\"edit-container\">\r\n                    {contactToEdit.name !== '' && <button onClick={this.handleDelete}>Delete</button>}\r\n                    <h1>{(this.props.match.params.contactId) ? 'Edit user' : 'Add user'}</h1>\r\n                    <form onSubmit={this.handleSubmit} className=\"edit-container-inputs\">\r\n                        <img src={`https://robohash.org/${contactToEdit.name}.png`}></img>\r\n                        Name:<input type=\"text\" name=\"name\" placeholder=\"name\" value={contactToEdit.name} onChange={this.handleChange} />\r\n                        Phone:<input type=\"text\" name=\"phone\" placeholder=\"Phone\" value={contactToEdit.phone} onChange={this.handleChange} />\r\n                        Email:<input type=\"text\" name=\"email\" placeholder=\"Email\" value={contactToEdit.email} onChange={this.handleChange} />\r\n                        <div className=\"btn-container\">\r\n                            <button>Save</button>\r\n                            {contactToEdit.name !== '' && <Link to={`/contact/${contactToEdit._id}`}>\r\n                                <button>Back</button>\r\n                            </Link>}\r\n                            {contactToEdit.name === '' && <Link to={`/contact`}>\r\n                                <button>Back</button>\r\n                            </Link>}\r\n                        </div>\r\n                    </form>\r\n                </div>}\r\n            </section>\r\n        )\r\n    }\r\n}\r\nexport default ContactEdit","// var  gUsers = [\r\n//     { name: \"Ido sade\", username: 'ido', coins: 100, moves: [] },\r\n//     { name: \"Nir las\", username: 'nir', coins: 100, moves: [] },\r\n//     { name: \"Ochoa Hyde\", username: 'ochoa', coins: 100, moves: [] }\r\n\r\n// ]\r\n\r\nfunction loadeUser(typedDetails) {\r\n    return  { name: typedDetails, coins: 100, moves: [] }\r\n    // return gUsers.filter(user => user.username === typedDetails)\r\n}\r\n\r\nexport default {\r\n    loadeUser\r\n}","import React, { Component } from 'react'\r\nimport '../LoginPage/LoginPage.scss'\r\nimport UserService from '../../services/UserService.js'\r\nimport { inject, observer } from 'mobx-react';\r\n\r\n\r\n@inject('store')\r\nclass LoginPage extends Component {\r\n\r\n    @observer\r\n    state = {\r\n        typedUsername: '',\r\n    }\r\n\r\n    handleDetails = ev => {\r\n        let typedUsername = this.input.value\r\n        this.setState({ typedUsername })\r\n    }\r\n\r\n    handleLogin = (ev) => {\r\n        ev.preventDefault()\r\n        this.props.store.UserStore.signup(this.state.typedUsername)\r\n        this.props.history.push('/contact')\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"login-container\">\r\n                <h1>Please enter your name</h1>\r\n                <form onSubmit={this.handleLogin}>\r\n                    <input type=\"text\" placeholder=\"Username\" ref={(input) => this.input = input} onChange={this.handleDetails} />\r\n                    <button>Sign up</button>\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default LoginPage","import React, { Component } from 'react';\nimport { HashRouter as Router, Route, NavLink, Switch, Redirect } from 'react-router-dom'\nimport HomePage from './pages/HomePage/HomePage.js'\nimport ContactPage from './pages/ContactPage/ContactPage'\nimport StatisticPage from './pages/StatisticPage/StatisticPage'\nimport ContactDetails from './pages/ContactDetails/ContactDetails'\nimport ContactEdit from './pages/ContactEdit/ContactEdit'\nimport SignupPage from './pages/LoginPage/LoginPage'\nimport './assets/css/App.scss'\n\nimport { inject, observer } from 'mobx-react';\n\n\nconst PrivateRoute = (props) => {\n  return props.user ? <Route {...props} /> : <Redirect to=\"/Signup\" />\n}\n\n\n@inject('store')\n@observer\nclass App extends Component {\n\n\n\n  render() {\n    const user = this.props.store.UserStore.logedUser\n    console.log('user is', user)\n\n    return (\n      <Router>\n        <div>\n          <div className=\"App\">\n            <ul className=\"nav-container\">\n              <NavLink exact to=\"/Contact\">\n                <li>Bit a friend |</li>\n              </NavLink>\n              <NavLink exact to=\"/Home\">\n                <li>My Profie |</li>\n              </NavLink>\n              <NavLink exact to=\"/Statistics\">\n                <li>Statistics</li>\n              </NavLink>\n            </ul>\n            <Switch>\n              <Route path=\"/Signup\" component={SignupPage} />\n              <PrivateRoute path=\"/Home\" user={user} component={HomePage} />\n              <Route path=\"/Statistics\" component={StatisticPage} />\n              <PrivateRoute path=\"/Contact\" user={user} exact component={ContactPage} />\n              <Route path=\"/Contact/Edit/:contactId?\" component={ContactEdit} />\n              <Route path=\"/Contact/:contactId\" component={ContactDetails} />\n            </Switch>\n\n          </div>\n        </div>\n      </Router>\n\n    );\n  }\n}\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import ContactService from \"../services/ContactService\";\r\nimport { observable } from 'mobx'\r\nexport default class ContactStore {\r\n  @observable\r\n  contacts = [];\r\n  @observable\r\n  selectedContact = null;\r\n  filterByName = '';\r\n\r\n  constructor(rootStore) {\r\n    this.rootStore = rootStore;\r\n  }\r\n\r\n  //   @action\r\n  async fetchContacts(filter) {\r\n    this.contacts = await ContactService.getContacts(filter);\r\n  }\r\n\r\n  async getContactById(contactId) {\r\n    console.log('contactId', contactId);\r\n    const selectedContact = await ContactService.getContactById(contactId);\r\n    this.selectedContact = selectedContact\r\n  }\r\n\r\n  getEmptyContact() {\r\n    this.selectedContact = ContactService.getEmptyContact();\r\n  }\r\n\r\n  saveContact(contact) {\r\n    console.log('saving', contact);\r\n    return ContactService.saveContact(contact)\r\n  }\r\n\r\n\r\n  deleteContact(contactId) {\r\n    ContactService.deleteContact(contactId)\r\n  }\r\n\r\n\r\n}","import UserService from '../services/UserService.js'\r\nimport { observable,action } from 'mobx';\r\n\r\nexport default class UserStore {\r\n    @observable\r\n    logedUser = null;\r\n\r\n    // todo redirect with private routes after check login\r\n\r\n    setUser() {\r\n        var logedUser = JSON.parse(localStorage.getItem('loged-user'));\r\n        this.logedUser = logedUser\r\n    }\r\n\r\n    @action\r\n    signup(typedUsername) {        \r\n        this.logedUser = UserService.loadeUser(typedUsername)\r\n        localStorage.setItem('loged-user', JSON.stringify(this.logedUser));\r\n        return Promise.resolve(this.logedUser)\r\n    }\r\n}","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './assets/css/index.scss';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport RootStore from './store/RootStore';\nimport { Provider } from 'mobx-react'\n\nconst rootStore = new RootStore();\n\nrootStore.UserStore.setUser();\n\nReactDOM.render(\n    <Provider store={rootStore}>\n        <React.Fragment>\n            <App />\n            {/* <DevTools /> */}\n        </React.Fragment>\n    </Provider>,\n    document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn morew about service orkers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import ContactStore from './ContactStore';\r\nimport UserStore from './UserStore';\r\n\r\nexport default class RootStore {\r\n  showNavBar = true;\r\n  constructor() {\r\n      this.contactStore = new ContactStore(this);\r\n      this.UserStore = new UserStore(this);\r\n  }\r\n}\r\n"],"sourceRoot":""}